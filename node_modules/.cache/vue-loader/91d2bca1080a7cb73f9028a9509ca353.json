{"remainingRequest":"/Users/anusornmennakred/Documents/Vue/live-homepro-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anusornmennakred/Documents/Vue/live-homepro-admin/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/anusornmennakred/Documents/Vue/live-homepro-admin/src/views/Home.vue","mtime":1597733514661},{"path":"/Users/anusornmennakred/Documents/Vue/live-homepro-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anusornmennakred/Documents/Vue/live-homepro-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/anusornmennakred/Documents/Vue/live-homepro-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anusornmennakred/Documents/Vue/live-homepro-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IGxvZyA9IGNvbnNvbGU7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiSG9tZSIsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHN1cHBvcnRlZDogdHJ1ZSwKICAgICAgc3RhdHVzOiB7CiAgICAgICAgdHlwZTogewogICAgICAgICAgbmFtZTogJ1R5cGUnLAogICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCwKICAgICAgICB9LAogICAgICAgIGVmZmVjdGl2ZVR5cGU6IHsKICAgICAgICAgIG5hbWU6ICdFZmZlY3RpdmUgVHlwZScsCiAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLAogICAgICAgIH0sCiAgICAgICAgcnR0OiB7CiAgICAgICAgICBuYW1lOiAnUm91bmQgVHJpcCBUaW1lJywKICAgICAgICAgIHVuaXQ6ICdtcycsCiAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLAogICAgICAgIH0sCiAgICAgICAgZG93bmxpbms6IHsKICAgICAgICAgIG5hbWU6ICdEb3dubGluaycsCiAgICAgICAgICB1bml0OiAnTWIvcycsCiAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLAogICAgICAgIH0sCiAgICAgICAgZG93bmxpbmtNYXg6IHsKICAgICAgICAgIG5hbWU6ICdNYXggRG93bmxpbmsnLAogICAgICAgICAgdW5pdDogJ01iL3MnLAogICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCwKICAgICAgICB9LAogICAgICB9LAogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIG5ldHdvcmtJbmZvSGFuZGxlcigpIHsKICAgICAgY29uc3QgYyA9IG5hdmlnYXRvci5jb25uZWN0aW9uOwogICAgICBsb2cuZ3JvdXAoJ05ldHdvcmsgaW5mbyBldmVudCcsIGMpOwogICAgICAvLyBOZXR3b3JrIHR5cGUgdGhhdCBicm93c2VyIHVzZXMKICAgICAgbG9nLmRlYnVnKCd0eXBlJywgYy50eXBlKTsKICAgICAgLy8gRWZmZWN0aXZlIGJhbmR3aWR0aCBlc3RpbWF0ZQogICAgICBsb2cuZGVidWcoJ2Rvd25saW5rJywgYy5kb3dubGluayk7CiAgICAgIC8vIEVmZmVjdGl2ZSByb3VuZC10cmlwIHRpbWUgZXN0aW1hdGUKICAgICAgbG9nLmRlYnVnKCdydHQnLCBjLnJ0dCk7CiAgICAgIC8vIFVwcGVyIGJvdW5kIG9uIHRoZSBkb3dubGluayBzcGVlZCBvZiB0aGUgZmlyc3QgbmV0d29yayBob3AKICAgICAgbG9nLmRlYnVnKCdkb3dubGlua01heCcsIGMuZG93bmxpbmtNYXgpOwogICAgICAvLyBFZmZlY3RpdmUgY29ubmVjdGlvbiB0eXBlIGRldGVybWluZWQgdXNpbmcgYSBjb21iaW5hdGlvbiBvZiByZWNlbnRseQogICAgICAvLyBvYnNlcnZlZCBydHQgYW5kIGRvd25saW5rIHZhbHVlczogJyArCiAgICAgIGxvZy5kZWJ1ZygnZWZmZWN0aXZlVHlwZScsIGMuZWZmZWN0aXZlVHlwZSk7CiAgICAgIGxvZy5ncm91cEVuZCgpOwogICAgICB0aGlzLnN0YXR1cy50eXBlLnZhbHVlID0gYy50eXBlOwogICAgICB0aGlzLnN0YXR1cy5kb3dubGluay52YWx1ZSA9IGMuZG93bmxpbms7CiAgICAgIHRoaXMuc3RhdHVzLnJ0dC52YWx1ZSA9IGMucnR0OwogICAgICB0aGlzLnN0YXR1cy5kb3dubGlua01heC52YWx1ZSA9IGMuZG93bmxpbmtNYXg7CiAgICAgIHRoaXMuc3RhdHVzLmVmZmVjdGl2ZVR5cGUudmFsdWUgPSBjLmVmZmVjdGl2ZVR5cGU7CiAgICB9LAogIH0sCiAgbW91bnRlZCgpIHsKICAgIGlmICghbmF2aWdhdG9yLmNvbm5lY3Rpb24pIHsKICAgICAgY29uc3QgZXJyb3JNc2cgPSAnTmV0d29yayBBUEkgbm90IHN1cHBvcnRlZCc7CiAgICAgIGxvZy5lcnJvcihlcnJvck1zZyk7CiAgICAgIHRoaXMuJGVtaXQoJ2Vycm9yJywgZXJyb3JNc2cpOwogICAgICB0aGlzLnN1cHBvcnRlZCA9IGZhbHNlOwogICAgfSBlbHNlIHsKICAgICAgbG9nLmluZm8oJ05ldHdvcmsgQVBJIHN1cHBvcnRlZCcpOwogICAgICBuYXZpZ2F0b3IuY29ubmVjdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLm5ldHdvcmtJbmZvSGFuZGxlcik7CiAgICAgIHRoaXMubmV0d29ya0luZm9IYW5kbGVyKCk7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <div class=\"flex flex-wrap items-start justify-between\">\n      <h1 class=\"text-3xl mb-6\">Setting</h1>\n    </div>\n    <h1>{{ status.type.name }} : {{ status.type.value }}</h1>\n    <h1>{{ status.effectiveType.name }} : {{ status.effectiveType.value }}</h1>\n    <h1>{{ status.rtt.name }} : {{ status.rtt.value }}</h1>\n    <h1>{{ status.downlink.name }} : {{ status.downlink.value }}</h1>\n    <h1>{{ status.downlinkMax.name }} : {{ status.downlinkMax.value }}</h1>\n  </div>\n</template>\n\n<script>\nconst log = console;\nexport default {\n  name: \"Home\",\n  data() {\n    return {\n      supported: true,\n      status: {\n        type: {\n          name: 'Type',\n          value: undefined,\n        },\n        effectiveType: {\n          name: 'Effective Type',\n          value: undefined,\n        },\n        rtt: {\n          name: 'Round Trip Time',\n          unit: 'ms',\n          value: undefined,\n        },\n        downlink: {\n          name: 'Downlink',\n          unit: 'Mb/s',\n          value: undefined,\n        },\n        downlinkMax: {\n          name: 'Max Downlink',\n          unit: 'Mb/s',\n          value: undefined,\n        },\n      },\n    };\n  },\n  methods: {\n    networkInfoHandler() {\n      const c = navigator.connection;\n      log.group('Network info event', c);\n      // Network type that browser uses\n      log.debug('type', c.type);\n      // Effective bandwidth estimate\n      log.debug('downlink', c.downlink);\n      // Effective round-trip time estimate\n      log.debug('rtt', c.rtt);\n      // Upper bound on the downlink speed of the first network hop\n      log.debug('downlinkMax', c.downlinkMax);\n      // Effective connection type determined using a combination of recently\n      // observed rtt and downlink values: ' +\n      log.debug('effectiveType', c.effectiveType);\n      log.groupEnd();\n      this.status.type.value = c.type;\n      this.status.downlink.value = c.downlink;\n      this.status.rtt.value = c.rtt;\n      this.status.downlinkMax.value = c.downlinkMax;\n      this.status.effectiveType.value = c.effectiveType;\n    },\n  },\n  mounted() {\n    if (!navigator.connection) {\n      const errorMsg = 'Network API not supported';\n      log.error(errorMsg);\n      this.$emit('error', errorMsg);\n      this.supported = false;\n    } else {\n      log.info('Network API supported');\n      navigator.connection.addEventListener('change', this.networkInfoHandler);\n      this.networkInfoHandler();\n    }\n  }\n};\n</script>\n"]}]}